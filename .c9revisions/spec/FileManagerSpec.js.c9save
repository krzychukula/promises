{"ts":1361717476192,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"describe(\"Player\", function() {\n  var player;\n  var song;\n\n  beforeEach(function() {\n    player = new Player();\n    song = new Song();\n  });\n\n  it(\"should be able to play a Song\", function() {\n    player.play(song);\n    expect(player.currentlyPlayingSong).toEqual(song);\n\n    //demonstrates use of custom matcher\n    expect(player).toBePlaying(song);\n  });\n\n  describe(\"when song has been paused\", function() {\n    beforeEach(function() {\n      player.play(song);\n      player.pause();\n    });\n\n    it(\"should indicate that the song is currently paused\", function() {\n      expect(player.isPlaying).toBeFalsy();\n\n      // demonstrates use of 'not' with a custom matcher\n      expect(player).not.toBePlaying(song);\n    });\n\n    it(\"should be possible to resume\", function() {\n      player.resume();\n      expect(player.isPlaying).toBeTruthy();\n      expect(player.currentlyPlayingSong).toEqual(song);\n    });\n  });\n\n  // demonstrates use of spies to intercept and test method calls\n  it(\"tells the current song if the user has made it a favorite\", function() {\n    spyOn(song, 'persistFavoriteStatus');\n\n    player.play(song);\n    player.makeFavorite();\n\n    expect(song.persistFavoriteStatus).toHaveBeenCalledWith(true);\n  });\n\n  //demonstrates use of expected exceptions\n  describe(\"#resume\", function() {\n    it(\"should throw an exception if song is already playing\", function() {\n      player.play(song);\n\n      expect(function() {\n        player.resume();\n      }).toThrow(\"song is already playing\");\n    });\n  });\n});"]],"start1":0,"start2":0,"length1":0,"length2":1522}]],"length":1522}
{"contributors":[],"silentsave":false,"ts":1361718065490,"patch":[[{"diffs":[[0,"var "],[-1,"player;\n  var song"],[1,"fileManager"],[0,";\n\n "]],"start1":34,"start2":34,"length1":26,"length2":19},{"diffs":[[0,"    "],[-1,"player = new Player();\n    song = new Song();\n  });\n\n  it(\"should be able to play a Song\", function() {\n    player.play(song);\n    expect(player.currentlyPlayingSong).toEqual(song);\n\n    //demonstrates use of custom matcher\n    expect(player).toBePlaying(song);\n  });\n\n  describe(\"when song has been paused\", function() {\n    beforeEach(function() {\n      player.play(song);\n      player.pause"],[1,"fileManager = new FileManager"],[0,"();\n"],[-1,"  "],[0,"  });\n\n"],[-1,"  "],[0,"  it("],[-1,"\""],[1,"'"],[0,"shou"],[-1,"l"],[0,"d "],[-1,"indicate that the song is currently paused\", function() {\n      expect(player.isPlaying).toBeFalsy();\n\n      // demonstrates use of 'not' with a custom matcher\n      expect(player).not.toBePlaying(song);\n    });\n\n    it(\"should be possible to resume\""],[1,"run'"],[0,", fu"]],"start1":78,"start2":78,"length1":679,"length2":64},{"diffs":[[0,"d run', function"],[1," "],[0,"() {\n      playe"]],"start1":132,"start2":132,"length1":32,"length2":33},{"diffs":[[0,"    "],[-1,"  player.resume();\n      expect(player.isPlaying).toBeTruthy();\n      expect(player.currentlyPlayingSong).toEqual(song);\n    });\n  });\n\n  // demonstrates use of spies to intercept and test method calls\n  it(\"tells the current song if the user has made it a favorite\", function() {\n    spyOn(song, 'persistFavoriteStatus');\n\n    player.play(song);\n    player.makeFavorite();\n\n    expect(song.persistFavoriteStatus).toHaveBeenCalledWith(true);\n  });\n\n  //demonstrates use of expected exceptions\n  describe(\"#resume\", function() {\n    it(\"should throw an exception if song is already playing\", function() {\n      player.play(song);\n\n      expect(function() {\n        player.resume();\n      }).toThrow(\"song is already playing\");\n    });\n  });"],[1,"expect(fileManager).toBeTruthy();\n  })"],[0,"\n});"]],"start1":154,"start2":154,"length1":747,"length2":46}]],"length":200,"saved":false}
{"ts":1361718245867,"patch":[[{"diffs":[[1,"/*global describe:true beforeEach:true it:true expect:true */\n"],[0,"describe"]],"start1":0,"start2":0,"length1":8,"length2":70}]],"length":262,"saved":false}
{"ts":1361718255726,"patch":[[{"diffs":[[0,"ect:true"],[-1," "],[1,"\nFileManager:true\n\n"],[0,"*/\ndescr"]],"start1":50,"start2":50,"length1":17,"length2":35}]],"length":280,"saved":false}
{"ts":1361720333526,"patch":[[{"diffs":[[0,"() {"],[-1,"\n  var fileManager;\n\n  beforeEach(function() {\n    fileManager = new FileManager();\n  });"],[0,"\n\n  "]],"start1":107,"start2":107,"length1":97,"length2":8},{"diffs":[[0,"ect("],[-1,"fileManager"],[1,"onInitFs"],[0,").to"]],"start1":152,"start2":152,"length1":19,"length2":16}]],"length":188,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361722346685,"patch":[[{"diffs":[[0,"ect("],[-1,"onInitFs).toBeTruthy("],[1,"writeAndRead).toBeTruthy();\n  })\n  \n  runs(function() {\n      flag = false;\n      value = 0;\n\n      setTimeout(function() {\n        flag = true;\n      }, 500);\n    });\n    \n    waitsFor(function() {\n      value++;\n      return flag;\n    }, \"The Value should be incremented\", 750);\n    \n    runs(function() {\n      expect(value).toBeGreaterThan(0"],[0,");\n  "],[1," "],[1," "],[0,"})"],[1,";"],[0,"\n});"]],"start1":152,"start2":152,"length1":36,"length2":363}]],"length":515,"saved":false}
